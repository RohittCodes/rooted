// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique  // Add @unique constraint here
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts      Account[]
  sessions      Session[]
  lessons       Lesson[]  
  progress      Progress[]
  achievements  UserAchievement[]
  discussions   Discussion[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  CREATOR
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  slug        String
  parentId    String?    @db.ObjectId
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  lessons     Lesson[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([parentId])
  @@index([slug])
}

model Tag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String
  lessons   Lesson[]  @relation(fields: [lessonIds], references: [id])
  lessonIds String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([slug])
}

model Lesson {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String
  description String
  content     String       // Markdown or HTML content
  difficulty  Difficulty
  status      LessonStatus @default(DRAFT)
  publishedAt DateTime?
  exercises   Exercise[]
  categoryId  String       @db.ObjectId
  category    Category     @relation(fields: [categoryId], references: [id])
  tags        Tag[]        @relation(fields: [tagIds], references: [id])
  tagIds      String[]     @db.ObjectId
  createdById String       @db.ObjectId
  createdBy   User         @relation(fields: [createdById], references: [id])
  progress    Progress[]
  discussions Discussion[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([categoryId])
  @@index([createdById])
  @@index([slug])
  @@index([status])
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Exercise {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  type        ExerciseType
  data        Json        // Stores exercise-specific data (questions, options, etc.)
  lessonId    String      @db.ObjectId
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts    ExerciseAttempt[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([lessonId])
}

enum ExerciseType {
  QUIZ
  MULTIPLE_CHOICE
  TEXT_INPUT
  PRACTICE
  CODE_CHALLENGE
}

model ExerciseAttempt {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  exerciseId String   @db.ObjectId
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  answer     Json     // User's submitted answer
  isCorrect  Boolean
  createdAt  DateTime @default(now())

  @@index([exerciseId])
  @@index([userId])
}

model Progress {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  userId      String         @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String         @db.ObjectId
  lesson      Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  status      ProgressStatus
  score       Int?
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
  @@index([lessonId])
  @@unique([userId, lessonId])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Achievement {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  name         String            @unique
  description  String
  criteria     Json              // Achievement criteria
  icon         String?           // Icon URL
  points       Int               @default(0)
  userAchievements UserAchievement[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model UserAchievement {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String      @db.ObjectId
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([achievementId])
  @@unique([userId, achievementId])
}

model Discussion {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  lessonId  String       @db.ObjectId
  lesson    Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?      @db.ObjectId
  parent    Discussion?  @relation("DiscussionThread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Discussion[] @relation("DiscussionThread")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([lessonId])
  @@index([userId])
  @@index([parentId])
}